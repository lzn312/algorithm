package leetcode.位运算;


/**
 * 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
 *
 * 说明：
 *
 * 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
 *
 * 示例 1:
 *
 * 输入: [2,2,1]
 * 输出: 1
 * 示例 2:
 *
 * 输入: [4,1,2,1,2]
 * 输出: 4
 *
 **/
public class _136_只出现一次的数字 {


    /**
     * 看到这题的第一反应就是，我们应该使用位运算来进行题解，
     * 因为这题给了很多限定条件，非空整数组，不需要做判空。  除了某个元素只出现一次以外，其余每个元素均出现两次。
     * 我们只需要找到那个元素就行了。
     * 异或操作，本身异或结果为0
     * 0和任何数异或为那个数本身，那么我们就可以遍历一次就得到结果
     **/
    public int singleNumber(int[] nums) {
            int res = nums[0];
            for (int i = 1; i < nums.length; i++) {
                res ^= nums[i];
            }
            return res;
    }
}
