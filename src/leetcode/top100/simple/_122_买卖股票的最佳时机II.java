package leetcode.top100.simple;
/**
 * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
 *
 * 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
 *
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 *
 * 示例 1:
 *
 * 输入: [7,1,5,3,6,4]
 * 输出: 7
 * 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
 *      随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
 * 示例 2:
 *
 * 输入: [1,2,3,4,5]
 * 输出: 4
 * 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
 *      注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
 *      因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 * 示例 3:
 *
 * 输入: [7,6,4,3,1]
 * 输出: 0
 * 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
 *
 * 链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii
 **/
public class _122_买卖股票的最佳时机II {


    public static int maxProfit2(int[] prices){
        if (prices.length <= 1) return  0;
        //定义状态 i,k,当前状态(0-不持有，1-持有)
        // 因为k是正无穷,那么数学估计 k≈k-1 所以k可以省略
        int[][] dp = new int[2][2];
        for (int i = 0; i < prices.length; i++) {
            if (i == 0){
                dp[i][0] = 0;
                /**
                 * 解释 dp[0][0] = max(dp[-1][0] , dp[-1][1] + prices[i])
                 * -1不持有状态收益肯定为0
                 * dp[-1][0] = 0
                 * -1抛出股票,属于异常操作,因为-1超出了合理天数 定义
                 * dp[-1][1] = Integer.MIN_VALUE;所以为0
                 **/
                dp[i][1] = -prices[i];
                /**
                 * 解释 dp[0][1] = max(dp[-1][1] , dp[-1][0] - prices[i])
                 * 表示第0天持有股票的收益: max(可能为上一天持有股票收益, 今天买入股票收益)
                 * -1不持有状态收益肯定为0
                 * dp[-1][0] = 0
                 * -1抛出股票,属于异常操作,因为-1超出了合理天数 定义
                 * dp[-1][1] = Integer.MIN_VALUE;所以为0
                 **/
                continue;
            }
            dp[ i & 1][0] = Math.max(dp[(i-1) & 1][0], dp[(i-1 )& 1][1] + prices[i]);
            dp[i & 1][1] = Math.max(dp[(i-1) & 1][1],  dp[(i-1) & 1][0] - prices[i]);
        }
        // 最后一天非持有股票的收益肯定为最大值
        return dp[(prices.length -1)  & 1 ][0];
    }

    public static void main(String[] args) {
        System.out.println(maxProfit2(new int[]{1,2,3,4,5}));
    }
}
